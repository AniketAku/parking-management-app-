// Service Worker for Parking Management System PWA
// Implements caching strategies, offline support, and background sync

import { precacheAndRoute } from 'workbox-precaching';

// Workbox will inject the manifest here
precacheAndRoute(self.__WB_MANIFEST);

const CACHE_NAME = 'parking-system-v1.0.0'
const RUNTIME_CACHE = 'parking-runtime-v1.0.0'
const DATA_CACHE = 'parking-data-v1.0.0'

// Files to cache on install
const STATIC_CACHE_URLS = [
  '/',
  '/login',
  '/dashboard',
  '/entry',
  '/exit',
  '/search',
  '/reports',
  '/manifest.json',
  // Add critical CSS and JS files - these will be auto-generated by Vite
]

// API endpoints to cache
const DATA_CACHE_URLS = [
  '/api/auth/me',
  '/api/parking/statistics',
  '/api/parking/entries',
]

// Network-first strategy for these paths
const NETWORK_FIRST_PATHS = [
  '/api/auth/',
  '/api/parking/entry',
  '/api/parking/exit',
  '/socket.io/',
]

// Cache-first strategy for these paths
const CACHE_FIRST_PATHS = [
  '/api/parking/statistics',
  '/api/reports/',
]

// Install event - cache static resources
self.addEventListener('install', (event) => {
  console.log('[SW] Installing service worker...')
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('[SW] Caching static resources')
        return cache.addAll(STATIC_CACHE_URLS)
      })
      .then(() => {
        console.log('[SW] Static resources cached successfully')
        // Force activation of new service worker
        return self.skipWaiting()
      })
      .catch((error) => {
        console.error('[SW] Failed to cache static resources:', error)
      })
  )
})

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating service worker...')
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            // Delete old caches
            if (cacheName !== CACHE_NAME && 
                cacheName !== RUNTIME_CACHE && 
                cacheName !== DATA_CACHE) {
              console.log('[SW] Deleting old cache:', cacheName)
              return caches.delete(cacheName)
            }
          })
        )
      })
      .then(() => {
        console.log('[SW] Service worker activated successfully')
        // Take control of all clients immediately
        return self.clients.claim()
      })
      .catch((error) => {
        console.error('[SW] Failed to activate service worker:', error)
      })
  )
})

// Fetch event - implement caching strategies
self.addEventListener('fetch', (event) => {
  const { request } = event
  const url = new URL(request.url)
  
  // Skip non-http requests
  if (!request.url.startsWith('http')) return
  
  // Skip requests to different origins (except API)
  if (url.origin !== location.origin && !url.pathname.startsWith('/api')) {
    return
  }
  
  // Handle different request types with appropriate strategies
  if (request.method === 'GET') {
    event.respondWith(handleGetRequest(request))
  } else if (request.method === 'POST' || request.method === 'PUT' || request.method === 'DELETE') {
    event.respondWith(handleMutationRequest(request))
  }
})

// Handle GET requests with caching strategies
async function handleGetRequest(request) {
  const url = new URL(request.url)
  const pathname = url.pathname
  
  try {
    // Network-first strategy for dynamic API endpoints
    if (NETWORK_FIRST_PATHS.some(path => pathname.startsWith(path))) {
      return await networkFirstStrategy(request)
    }
    
    // Cache-first strategy for static API data
    if (CACHE_FIRST_PATHS.some(path => pathname.startsWith(path))) {
      return await cacheFirstStrategy(request)
    }
    
    // Stale-while-revalidate for navigation requests
    if (request.mode === 'navigate') {
      return await staleWhileRevalidateStrategy(request)
    }
    
    // Default cache-first for static resources
    return await cacheFirstStrategy(request)
    
  } catch (error) {
    console.error('[SW] Fetch error:', error)
    return await getOfflineFallback(request)
  }
}

// Handle POST/PUT/DELETE requests with background sync
async function handleMutationRequest(request) {
  try {
    // Try network request first
    const response = await fetch(request)
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    // Cache successful responses for certain endpoints
    if (request.url.includes('/api/parking/')) {
      await invalidateRelatedCaches(request.url)
    }
    
    return response
    
  } catch (error) {
    console.error('[SW] Mutation request failed:', error)
    
    // Store failed requests for background sync
    await storeFailedRequest(request)
    
    // Return error response
    return new Response(
      JSON.stringify({ 
        error: 'Request failed and queued for retry',
        offline: true 
      }),
      { 
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
}

// Network-first strategy
async function networkFirstStrategy(request) {
  try {
    const networkResponse = await fetch(request)
    
    if (networkResponse.ok) {
      // Cache successful network response
      const cache = await caches.open(DATA_CACHE)
      cache.put(request, networkResponse.clone())
    }
    
    return networkResponse
    
  } catch (error) {
    console.log('[SW] Network failed, trying cache:', request.url)
    const cachedResponse = await caches.match(request)
    
    if (cachedResponse) {
      return cachedResponse
    }
    
    throw error
  }
}

// Cache-first strategy
async function cacheFirstStrategy(request) {
  const cachedResponse = await caches.match(request)
  
  if (cachedResponse) {
    // Update cache in background if stale
    updateCacheInBackground(request)
    return cachedResponse
  }
  
  // No cache, try network
  const networkResponse = await fetch(request)
  
  if (networkResponse.ok) {
    const cache = await caches.open(RUNTIME_CACHE)
    cache.put(request, networkResponse.clone())
  }
  
  return networkResponse
}

// Stale-while-revalidate strategy
async function staleWhileRevalidateStrategy(request) {
  const cachedResponse = await caches.match(request)
  
  // Always try to fetch from network in background
  const networkPromise = fetch(request)
    .then(async (response) => {
      if (response.ok) {
        const cache = await caches.open(CACHE_NAME)
        cache.put(request, response.clone())
      }
      return response
    })
    .catch((error) => {
      console.log('[SW] Network fetch failed:', error)
    })
  
  // Return cached version immediately if available
  if (cachedResponse) {
    // Network update happens in background
    networkPromise
    return cachedResponse
  }
  
  // No cache, wait for network
  try {
    return await networkPromise
  } catch (error) {
    return await getOfflineFallback(request)
  }
}

// Update cache in background
async function updateCacheInBackground(request) {
  try {
    const networkResponse = await fetch(request)
    
    if (networkResponse.ok) {
      const cache = await caches.open(RUNTIME_CACHE)
      await cache.put(request, networkResponse.clone())
      console.log('[SW] Cache updated in background:', request.url)
    }
  } catch (error) {
    console.log('[SW] Background cache update failed:', request.url)
  }
}

// Get offline fallback response
async function getOfflineFallback(request) {
  const url = new URL(request.url)
  
  // Return offline page for navigation requests
  if (request.mode === 'navigate') {
    const offlineResponse = await caches.match('/offline.html')
    if (offlineResponse) return offlineResponse
    
    // Fallback to basic offline response
    return new Response(
      `<!DOCTYPE html>
      <html>
        <head>
          <title>Offline - Parking System</title>
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <style>
            body { 
              font-family: system-ui, sans-serif; 
              text-align: center; 
              padding: 2rem;
              background: #f3f4f6;
            }
            .offline-container {
              max-width: 400px;
              margin: 2rem auto;
              padding: 2rem;
              background: white;
              border-radius: 8px;
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            .icon { font-size: 3rem; margin-bottom: 1rem; }
            h1 { color: #374151; margin-bottom: 1rem; }
            p { color: #6b7280; margin-bottom: 2rem; }
            button {
              background: #3b82f6;
              color: white;
              border: none;
              padding: 0.75rem 1.5rem;
              border-radius: 6px;
              cursor: pointer;
              font-size: 1rem;
            }
            button:hover { background: #2563eb; }
          </style>
        </head>
        <body>
          <div class="offline-container">
            <div class="icon">ðŸ“±</div>
            <h1>You're Offline</h1>
            <p>The parking management system is not available right now. Please check your internet connection and try again.</p>
            <button onclick="window.location.reload()">Try Again</button>
          </div>
        </body>
      </html>`,
      { 
        headers: { 'Content-Type': 'text/html' },
        status: 200
      }
    )
  }
  
  // Return JSON error for API requests
  if (url.pathname.startsWith('/api/')) {
    return new Response(
      JSON.stringify({
        error: 'Service unavailable offline',
        offline: true,
        timestamp: new Date().toISOString()
      }),
      {
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
  
  // Generic offline response
  return new Response('Service unavailable offline', { status: 503 })
}

// Store failed request for background sync
async function storeFailedRequest(request) {
  const failedRequests = await getStoredFailedRequests()
  
  const requestData = {
    url: request.url,
    method: request.method,
    headers: Object.fromEntries(request.headers.entries()),
    body: request.method !== 'GET' ? await request.text() : null,
    timestamp: Date.now()
  }
  
  failedRequests.push(requestData)
  
  // Store in IndexedDB or localStorage fallback
  try {
    localStorage.setItem('failed-requests', JSON.stringify(failedRequests))
  } catch (error) {
    console.error('[SW] Failed to store failed request:', error)
  }
}

// Get stored failed requests
async function getStoredFailedRequests() {
  try {
    const stored = localStorage.getItem('failed-requests')
    return stored ? JSON.parse(stored) : []
  } catch (error) {
    console.error('[SW] Failed to retrieve stored requests:', error)
    return []
  }
}

// Invalidate related caches after successful mutations
async function invalidateRelatedCaches(url) {
  const cachesToCheck = [DATA_CACHE, RUNTIME_CACHE]
  
  for (const cacheName of cachesToCheck) {
    const cache = await caches.open(cacheName)
    const keys = await cache.keys()
    
    // Remove cached entries that might be stale
    for (const request of keys) {
      if (request.url.includes('/api/parking/') && 
          (request.url.includes('statistics') || 
           request.url.includes('entries'))) {
        await cache.delete(request)
        console.log('[SW] Invalidated cache:', request.url)
      }
    }
  }
}

// Background sync for failed requests
self.addEventListener('sync', (event) => {
  console.log('[SW] Background sync triggered:', event.tag)
  
  if (event.tag === 'background-sync-failed-requests') {
    event.waitUntil(retryFailedRequests())
  }
})

// Retry failed requests
async function retryFailedRequests() {
  const failedRequests = await getStoredFailedRequests()
  
  if (failedRequests.length === 0) return
  
  console.log(`[SW] Retrying ${failedRequests.length} failed requests`)
  
  const retryPromises = failedRequests.map(async (requestData, index) => {
    try {
      const response = await fetch(requestData.url, {
        method: requestData.method,
        headers: requestData.headers,
        body: requestData.body
      })
      
      if (response.ok) {
        console.log('[SW] Successfully retried request:', requestData.url)
        return index // Mark for removal
      }
      
    } catch (error) {
      console.log('[SW] Retry failed for:', requestData.url)
    }
    
    return null
  })
  
  const results = await Promise.all(retryPromises)
  
  // Remove successfully retried requests
  const remainingRequests = failedRequests.filter((_, index) => 
    !results.includes(index)
  )
  
  localStorage.setItem('failed-requests', JSON.stringify(remainingRequests))
  
  console.log(`[SW] Retry complete. ${remainingRequests.length} requests still pending`)
}

// Push notification handling
self.addEventListener('push', (event) => {
  const options = {
    body: event.data ? event.data.text() : 'New parking update available',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/badge-72x72.png',
    tag: 'parking-update',
    data: {
      url: '/'
    },
    actions: [
      {
        action: 'open',
        title: 'Open App',
        icon: '/icons/action-open.png'
      },
      {
        action: 'dismiss',
        title: 'Dismiss',
        icon: '/icons/action-dismiss.png'
      }
    ]
  }
  
  event.waitUntil(
    self.registration.showNotification('Parking System', options)
  )
})

// Notification click handling
self.addEventListener('notificationclick', (event) => {
  event.notification.close()
  
  if (event.action === 'open' || !event.action) {
    event.waitUntil(
      clients.openWindow(event.notification.data.url || '/')
    )
  }
})

// Message handling for communication with main app
self.addEventListener('message', (event) => {
  if (event.data && event.data.type) {
    switch (event.data.type) {
      case 'SKIP_WAITING':
        self.skipWaiting()
        break
      case 'CACHE_UPDATE':
        // Force cache update for specific resources
        updateCacheInBackground(new Request(event.data.url))
        break
      case 'CLEAR_CACHE':
        // Clear all caches
        caches.keys().then(names => {
          names.forEach(name => caches.delete(name))
        })
        break
    }
  }
})

console.log('[SW] Service worker script loaded')